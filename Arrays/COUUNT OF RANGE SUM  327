Given an integer array nums and two integers lower and upper, return the number of range sums that lie in [lower, upper] inclusive.

Range sum S(i, j) is defined as the sum of the elements in nums between indices i and j inclusive, where i <= j.

 

Example 1:

Input: nums = [-2,5,-1], lower = -2, upper = 2
Output: 3
Explanation: The three ranges are: [0,0], [2,2], and [0,2] and their respective sums are: -2, -1, 2.
Example 2:

Input: nums = [0], lower = 0, upper = 0
Output: 1
 

Constraints:

1 <= nums.length <= 105
-231 <= nums[i] <= 231 - 1
-105 <= lower <= upper <= 105
The answer is guaranteed to fit in a 32-bit integer.

SOLUTION :


var countRangeSum = function(nums, lower, upper) {

    let count = 0;
    
    function countRangeSums(prefix, left, right) {
        if (left === right) {
            return 0;
        }
        
        const mid = left + Math.floor((right - left) / 2);
        const countLeft = countRangeSums(prefix, left, mid);
        const countRight = countRangeSums(prefix, mid + 1, right);
        
        let mergeCount = 0;
        let i = left;
        let j1 = mid + 1;
        let j2 = mid + 1;
        
        for (let i = left; i <= mid; i++) {
            while (j1 <= right && prefix[j1] - prefix[i] < lower) j1++;
            while (j2 <= right && prefix[j2] - prefix[i] <= upper) j2++;
            mergeCount += j2 - j1;
        }
        
        let sorted = [];
        let leftIndex = left;
        let rightIndex = mid + 1;
        while (leftIndex <= mid && rightIndex <= right) {
            if (prefix[leftIndex] <= prefix[rightIndex]) {
                sorted.push(prefix[leftIndex]);
                leftIndex++;
            } else {
                sorted.push(prefix[rightIndex]);
                rightIndex++;
            }
        }
        while (leftIndex <= mid) {
            sorted.push(prefix[leftIndex]);
            leftIndex++;
        }
        while (rightIndex <= right) {
            sorted.push(prefix[rightIndex]);
            rightIndex++;
        }
        
        for (let i = left; i <= right; i++) {
            prefix[i] = sorted[i - left];
        }
        
        return countLeft + countRight + mergeCount;
    }
    
    const n = nums.length;
    const prefix = new Array(n + 1).fill(0);
    for (let i = 0; i < n; i++) {
        prefix[i + 1] = prefix[i] + nums[i];
    }
    
    count = countRangeSums(prefix, 0, n);
    
    return count;
    
};
