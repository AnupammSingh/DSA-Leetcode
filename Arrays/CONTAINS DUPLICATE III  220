You are given an integer array nums and two integers indexDiff and valueDiff.

Find a pair of indices (i, j) such that:

i != j,
abs(i - j) <= indexDiff.
abs(nums[i] - nums[j]) <= valueDiff, and
Return true if such pair exists or false otherwise.

 

Example 1:

Input: nums = [1,2,3,1], indexDiff = 3, valueDiff = 0
Output: true
Explanation: We can choose (i, j) = (0, 3).
We satisfy the three conditions:
i != j --> 0 != 3
abs(i - j) <= indexDiff --> abs(0 - 3) <= 3
abs(nums[i] - nums[j]) <= valueDiff --> abs(1 - 1) <= 0
Example 2:

Input: nums = [1,5,9,1,5,9], indexDiff = 2, valueDiff = 3
Output: false
Explanation: After trying all the possible pairs (i, j), we cannot satisfy the three conditions, so we return false.
 

Constraints:

2 <= nums.length <= 105
-109 <= nums[i] <= 109
1 <= indexDiff <= nums.length
0 <= valueDiff <= 109


SOLUTION :


var containsNearbyAlmostDuplicate = function(nums, indexDiff, valueDiff) {

    if (indexDiff <= 0 || valueDiff < 0) {
        return false;
    }
    
    const bucketMap = {}; 
    
    for (let i = 0; i < nums.length; i++) {
        const num = nums[i];
        const bucket = Math.floor(num / (valueDiff + 1)); 
        
        for (let b = bucket - 1; b <= bucket + 1; b++) {
            if (bucketMap[b] !== undefined && Math.abs(bucketMap[b] - i) <= indexDiff && Math.abs(nums[bucketMap[b]] - num) <= valueDiff) {
                return true;
            }
        }
        
        bucketMap[bucket] = i;
        
        if (i >= indexDiff) {
            const removeBucket = Math.floor(nums[i - indexDiff] / (valueDiff + 1));
            delete bucketMap[removeBucket];
        }
    }
    
    return false
};
