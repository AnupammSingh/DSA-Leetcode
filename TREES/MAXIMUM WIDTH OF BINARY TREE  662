Given the root of a binary tree, return the maximum width of the given tree.

The maximum width of a tree is the maximum width among all levels.

The width of one level is defined as the length between the end-nodes (the leftmost and rightmost non-null nodes), where the null nodes between the end-nodes that would be present in a complete binary tree extending down to that level are also counted into the length calculation.

It is guaranteed that the answer will in the range of a 32-bit signed integer.

Input: root = [1,3,2,5,3,null,9]
Output: 4
Explanation: The maximum width exists in the third level with length 4 (5,3,null,9).

Input: root = [1,3,2,5,null,null,9,6,null,7]
Output: 7
Explanation: The maximum width exists in the fourth level with length 7 (6,null,null,null,null,null,7).

Input: root = [1,3,2,5]
Output: 2
Explanation: The maximum width exists in the second level with length 2 (3,2)


SOLUTION :

var widthOfBinaryTree = function(root) {

    if (root === null) {
        return 0;
    }

    var queue = [{ node: root, index: 0 }];
    var maxWidth = 0;

    while (queue.length > 0) {
        var levelSize = queue.length;
        var levelMin = queue[0].index; 
        var first, last;
        
        for (var i = 0; i < levelSize; i++) {
            var element = queue.shift();
            var node = element.node;
            var index = element.index - levelMin; 
            
            if (i === 0) first = index;
            if (i === levelSize - 1) last = index;
            
            if (node.left !== null) queue.push({ node: node.left, index: 2 * index + 1 });
            if (node.right !== null) queue.push({ node: node.right, index: 2 * index + 2 });
        }

        var currentWidth = last - first + 1;
        if (currentWidth > maxWidth) {
            maxWidth = currentWidth;
        }
    }

    return maxWidth;
    
};
