Given an m x n integer matrix heightMap representing the height of each unit cell in a 2D elevation map, return the volume of water it can trap after raining.

 

Example 1:


Input: heightMap = [[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1]]
Output: 4
Explanation: After the rain, water is trapped between the blocks.
We have two small ponds 1 and 3 units trapped.
The total volume of water trapped is 4.
Example 2:


Input: heightMap = [[3,3,3,3,3],[3,2,2,2,3],[3,2,1,2,3],[3,2,2,2,3],[3,3,3,3,3]]
Output: 10


SOLUTION :


class Cell {
    constructor(height, x, y) {
        this.height = height;
        this.x = x;
        this.y = y;
    }
}

class MinHeap {
    constructor() {
        this.heap = [];
    }

    push(cell) {
        this.heap.push(cell);
        this.bubbleUp();
    }

    pop() {
        if (this.heap.length === 1) {
            return this.heap.pop();
        }

        const min = this.heap[0];
        this.heap[0] = this.heap.pop();
        this.bubbleDown();
        return min;
    }

    bubbleUp() {
        let index = this.heap.length - 1;
        const cell = this.heap[index];

        while (index > 0) {
            const parentIndex = Math.floor((index - 1) / 2);
            const parent = this.heap[parentIndex];

            if (cell.height >= parent.height) {
                break;
            }

            this.heap[index] = parent;
            index = parentIndex;
        }

        this.heap[index] = cell;
    }

    bubbleDown() {
        let index = 0;
        const length = this.heap.length;
        const cell = this.heap[index];

        while (true) {
            const leftChildIndex = 2 * index + 1;
            const rightChildIndex = 2 * index + 2;
            let swapIndex = null;

            if (leftChildIndex < length) {
                const leftChild = this.heap[leftChildIndex];
                if (leftChild.height < cell.height) {
                    swapIndex = leftChildIndex;
                }
            }

            if (rightChildIndex < length) {
                const rightChild = this.heap[rightChildIndex];
                if (
                    (swapIndex === null && rightChild.height < cell.height) ||
                    (swapIndex !== null && rightChild.height < this.heap[swapIndex].height)
                ) {
                    swapIndex = rightChildIndex;
                }
            }

            if (swapIndex === null) break;

            this.heap[index] = this.heap[swapIndex];
            index = swapIndex;
        }

        this.heap[index] = cell;
    }

    isEmpty() {
        return this.heap.length === 0;
    }
}

var trapRainWater = function(heightMap) {

    if (heightMap.length === 0 || heightMap[0].length === 0) {
        return 0;
    }

    const m = heightMap.length;
    const n = heightMap[0].length;
    const visited = Array.from({ length: m }, () => Array(n).fill(false));
    const heap = new MinHeap();
    let waterTrapped = 0;
    const directions = [[0, 1], [1, 0], [0, -1], [-1, 0]];

    for (let i = 0; i < m; i++) {
        heap.push(new Cell(heightMap[i][0], i, 0));
        heap.push(new Cell(heightMap[i][n - 1], i, n - 1));
        visited[i][0] = true;
        visited[i][n - 1] = true;
    }

    for (let j = 1; j < n - 1; j++) {
        heap.push(new Cell(heightMap[0][j], 0, j));
        heap.push(new Cell(heightMap[m - 1][j], m - 1, j));
        visited[0][j] = true;
        visited[m - 1][j] = true;
    }

    while (!heap.isEmpty()) {
        const cell = heap.pop();
        for (const [dx, dy] of directions) {
            const nx = cell.x + dx;
            const ny = cell.y + dy;

            if (nx >= 0 && ny >= 0 && nx < m && ny < n && !visited[nx][ny]) {
                visited[nx][ny] = true;
                waterTrapped += Math.max(0, cell.height - heightMap[nx][ny]);
                heap.push(new Cell(Math.max(cell.height, heightMap[nx][ny]), nx, ny));
            }
        }
    }

    return waterTrapped;
    
};
